<!-- sub-template for admin to upload images and related information -->
<my-index-admin-images-upload></my-index-admin-images-upload>

<!-- information details for visitors -->
<style>
<!--
.axis path,.axis line {
	fill: none;
	stroke: #000;
	shape-rendering: crispEdges;
}

.x.axis path {
	display: none;
}

.line {
	fill: none;
	stroke: steelblue;
	stroke-width: 1.5px;
}

.d3_chart {
	font-size: 6px;
}

.form-control {
	width: 100% !important;
}

.grid .tick {
	stroke: lightgrey;
	stroke-opacity: 0.6;
	shape-rendering: crispEdges;
}

.grid path {
	stroke-width: 0;
}

.x.axis line {
	stroke: #fff;
	stroke-opacity: .5;
}

.y.axis line {
	stroke: #ddd;
}

path.line {
	fill: none;
	stroke: #000;
	stroke-width: .5px;
}

rect.pane {
	cursor: move;
	fill: none;
	pointer-events: all;
}
-->
</style>
<div ng-controller="indexImagesDetailListCtrl as ctrl">
	<div class="container">
		<div class="row">
			<!-- ng-paginator control panel -->
			<div>
				<br>
				<h4>Control Panel</h4>
				<div>

					<div>
						<label>Max-Pages</label> <input type="number" min="1" max="10"
							class="form-control" ng-model="pageSize">
					</div>
					<label>Filter</label> <input ng-model="q" id="search"
						class="form-control" placeholder="Filter by Keywords">
				</div>
			</div>

			<!-- ng-pagination list -->
			<div>
				<br>
				<h4>Images List</h4>
				<table class="table table-striped">
					<tbody>
						<tr
							dir-paginate="item in ctrl.imgs_detail | filter:q | itemsPerPage: pageSize"
							current-page="currentPage">
							<td>
								<h3>Image Title [[item.img_title]]</h3>
								<p style="font-size: 14px;">
									<span>Publish Time-</span> [[item.create_datetime]]
								</p>
								<h4>Description</h4>
								<p style="font-size: 14px;">[[item.img_description]]</p> <img
								alt="analysis_img" src="[[item.img_blob_url]]"
								class="img-responsive">
							</td>
						</tr>
					</tbody>
				</table>
			</div>

			<!-- pagination controller block -->
			<div ng-controller="indexImagesDetailListPaginationCtrl"
				style="border: none; border-bottom: #aaa dotted 1px; margin: 1px auto;">
				<div class="text-center">
					<dir-pagination-controls boundary-links="true"
						on-page-change="pageChangeHandler(newPageNumber)"></dir-pagination-controls>
				</div>
			</div>
		</div>

		<!--  -->
		<div class="row">
			<div ng-controller="indexDataAnalysisListCtrl as ctrl">
				<!-- ng-paginator control panel -->
				<div>
					<h4>Data Analysis List</h4>
					<br>
					<h4>Control Panel</h4>
					<div>
						<label>Max-Pages on Each List</label> <input type="number" min="1"
							max="10" class="form-control" ng-model="pageSize">
					</div>
					<div>
						<label for="search">Filter</label> <input ng-model="q" id="search"
							class="form-control" placeholder="Filter by Keywords">
					</div>
				</div>
				<br>
				<!-- ng-pagination list -->
				<div>
					<div
						dir-paginate-data-analysis="item in ctrl.data_ary | filter:q | itemsPerPageDataAnalysis: pageSize"
						current-page="currentPage">
						<div id="[[item.id]]" class="d3_chart"></div>
						<input type="button" value="Show Chart"
							ng-click="ctrl.visulaize_data([[item.id]], [[item.sub_data]])">

						<hr style="border: none; border-bottom: solid 1px #bbb;">
					</div>
				</div>

				<!-- pagination controller block -->
				<div ng-controller="indexDataAnalysisListPaginationCtrl"
					style="border: none; border-bottom: #aaa dotted 1px; margin: 1px auto;">
					<div class="text-center">
						<dir-pagination-data-analysis-controls boundary-links="true"
							on-page-change="pageChangeHandler(newPageNumber)"></dir-pagination-data-analysis-controls>
					</div>
				</div>

			</div>
		</div>


		<!-- D3 feature testing -->
	<div>
		<div id="chart_testing" style="font-size: 10px;"></div>
		<div id="footer">
			<span>â€¦</span>
			<div class="hint">mousewheel to zoom, drag to pan</div>
		</div>
	</div>
	</div>
</div>


<script type="text/javascript">
	(function() {
		// device size
		var device_width = screen.width;
		var device_height = screen.height;
		var min_val = Math.min(device_width, device_height);
		var chart_width, chart_height, xAxis_format;
		if (min_val <= 767) {
			chart_width = 250;
			chart_height = 130;
			xAxis_format = "%H:%M";
		} else {
			chart_width = 960;
			chart_height = 500;
			xAxis_format = "%X";
		}

		var m = {
			top : 5,
			right : 5,
			bottom : 20,
			left : 0
		}, w = chart_width - m.left - m.right, h = chart_height - m.top
				- m.bottom, parse = d3.time.format("%Y-%m-%d").parse, format = d3.time
				.format("%Y");

		// Scales. Note the inverted domain for the y-scale: bigger is up!
		var x = d3.time.scale().range([ 0, w ]), y = d3.scale.linear().range(
				[ h, 0 ]), xAxis = d3.svg.axis().scale(x).orient("bottom")
				.tickSize(-h, 0).tickPadding(6), yAxis = d3.svg.axis().scale(y)
				.orient("left");

		// An area generator.
		var area = d3.svg.area().interpolate("step-after").x(function(d) {
			return x(d.date);
		}).y0(y(0)).y1(function(d) {
			return y(d.value);
		});

		// A line generator.
		var line = d3.svg.line().interpolate("step-after").x(function(d) {
			return x(d.date);
		}).y(function(d) {
			return y(d.value);
		});

		var svg = d3.select("#chart_testing").append("svg:svg").attr("width",
				w + m.left + m.right).attr("height", h + m.top + m.bottom)
				.append("svg:g").attr("transform",
						"translate(" + m.right + "," + m.top + ")");

		var gradient = svg.append("svg:defs").append("svg:linearGradient")
				.attr("id", "gradient").attr("x2", "0%").attr("y2", "100%");

		gradient.append("svg:stop").attr("offset", "0%").attr("stop-color",
				"#fff").attr("stop-opacity", .5);

		gradient.append("svg:stop").attr("offset", "100%").attr("stop-color",
				"#999").attr("stop-opacity", 1);

		svg.append("svg:clipPath").attr("id", "clip").append("svg:rect").attr(
				"x", x(0)).attr("y", y(1)).attr("width", x(1) - x(0)).attr(
				"height", y(0) - y(1));

		svg.append("svg:g").attr("class", "y axis").call(yAxis);

		svg.append("svg:path").attr("class", "area").attr("clip-path",
				"url(#clip)").style("fill", "url(#gradient)");

		svg.append("svg:g").attr("class", "x axis").attr("transform",
				"translate(0," + h + ")").call(xAxis);

		svg.append("svg:path").attr("class", "line").attr("clip-path",
				"url(#clip)");

		var rect = svg.append("svg:rect").attr("class", "pane")
				.attr("width", w).attr("height", h);

		d3.csv("/mis/flights-departed.csv", function(data) {

			// Parse dates and numbers.
			data.forEach(function(d) {
				d.date = parse(d.date);
				d.value = +d.value;
			});

			// Compute the maximum price.
			x.domain([ new Date(1999, 0, 1), new Date(2003, 0, 0) ]);
			y.domain([ 0, d3.max(data, function(d) {
				return d.value;
			}) ]);

			// Bind the data to our path elements.
			svg.select("path.area").data([ data ]);
			svg.select("path.line").data([ data ]);

			rect.call(d3.behavior.zoom().x(x).on("zoom", zoom));

			draw();
		});

		function draw() {
			svg.select("g.x.axis").call(xAxis);
			svg.select("g.y.axis").call(yAxis);
			svg.select("path.area").attr("d", area);
			svg.select("path.line").attr("d", line);
			d3.select("#footer span").text(
					"U.S. Commercial Flights, "
							+ x.domain().map(format).join("-"));
		}

		function zoom() {
			// d3.event.transform(x); // TODO d3.behavior.zoom should support extents
			draw();
		}

	})();
</script>