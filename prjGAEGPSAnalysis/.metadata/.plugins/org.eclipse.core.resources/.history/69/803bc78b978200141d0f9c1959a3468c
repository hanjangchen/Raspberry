<!-- particle swarm optimization -->
<style>
<!--
.axis path, .axis line{
	fill: none;
	stroke: #333;
	stroke-width: 1px;
	shape-rendering: crispEdges;
}
.axis text{
	font-family: sans-serif;
	font-size: 10px;
}

.grid{
fill: none;
	stroke: #888;
	stroke-width: .5px;
	stroke-dasharray: 20, 10;
}
-->
</style>
<div>
	<div id="pso_animation"></div>
</div>

<script type="text/javascript">
<!--
(function(){
	// basic dimension
	var width = 950;
	var height = 620;
	var padding = 50;
	
	var dataSet = [[2,4],
	               [-12,54.043],
	               [8,32.324],
	               [21,89],
	               [32.423, 8.042],
	               [-43,76],
	               [0, 42]];
	
	// scale var
	var xScale = d3.scale.linear().domain([d3.min(dataSet, function(d){ return d[0]}),
	                                       d3.max(dataSet, function(d){ return d[0]})]).range([ padding, width - padding * 2]);
	
	var yScale = d3.scale.linear().domain([d3.min(dataSet, function(d){ return d[0]}),
	                                       d3.max(dataSet, function(d){ return d[0]})]).range([ height - padding * 2, padding]);
	
	var rScale = d3.scale.linear().domain([0, d3.max(dataSet, function(d){ return d[0]})]).range([ 1, 5]);
	
	// axis
	var xAxis = d3.svg.axis().scale(xScale).orient("bottom").ticks(8);
	var yAxis = d3.svg.axis().scale(yScale).orient("left").ticks(6);
	
	var x = d3.scale.linear().range([ padding, width - padding * 2 ]);

	var y = d3.scale.linear().range([ height - padding * 2, padding ]);
	
	// grid
	function make_x_axis(){
		return d3.svg.axis().scale(xScale).orient("bottom").ticks(6);
	}
	function make_y_axis(){
		return d3.svg.axis().scale(yScale).orient("left").ticks(6);
	}
	
	// draw coordinate
	var svg = d3.select("#pso_animation").append("svg").attr("width", width).attr("height", height);
	

	// create grid
	svg.append("g").attr("class", "grid").attr("transform", "translate( 0, 50)").call(make_x_axis().tickSize(height - padding * 2, 0, 0).tickFormat(""));
	svg.append("g").attr("class", "grid").attr("transform", "rotate(-90)").attr("y", -50).call(make_y_axis().tickSize(-(width - padding * 2 ), 0, 0).tickFormat(""));
	
	
	// create X axis
	svg.append("g").attr("class", "axis").attr("transform", "translate( 0, " + (height - padding * 2) + ")").call(xAxis);
	
	// create Y axis
	svg.append("g").attr("class", "axis").attr("transform", "translate( " + padding + ", 0)").call(yAxis);
	
	
})();
//-->
</script>